---
# FR: Vérifie si l'aspirateur à besoin d'être vidé
# EN: Check vacuum need to be emptied
#
# FR: Si oui, envoie un rappel sur Telegram demandant de confirmer la réalisation.
#     Il y a la possibilté de repousser de 30 minutes ou d'annuler.
# EN: If yes send a reminder on telegram asking to confirm it's done.
#     we can postponed in 30 minutes or cancel.

- alias: "Rappeler de vider imagisuck le soir"
  description: "Envoie une notification pour vider le réservoire de imagisuck."
  id: e602d1dd-2c63-4427-a851-8fe054cfa554
  mode: restart
  trigger:
    - platform: time
      at: "20:47:00"
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.redemande_vider_imagisuck
  condition:
    - condition: state
      entity_id: input_boolean.vacuum_need_to_be_emptied
      state: "on"
  action:
    - service: notify.telegram
      data:
        data:
          inline_keyboard:
            - Oui:/resetimagisuck, Redemande:/redemandeimagisuck, Demain:/demainimagisuck
        message: >
          imagisuck a été utilisé aujourd'hui et le bac n'a pas été vidé depuis
          {{ states.sensor.rockrobo_vacuum_v1_total_clean_count.state | int - states('variable.nb_cleaning_last_dust_bin_emptied')
          | int }} nettoyages ({{state_attr('vacuum.rockrobo_vacuum_v1','total_cleaned_area')
          | int - state_attr('variable.nb_cleaning_last_dust_bin_emptied','area')| int }}
          m²). Il a besoin que l'on vide son bac. Est-ce déjà fait ?
    - wait_for_trigger:
        - platform: event
          event_type: telegram_callback
    - choose:
        - conditions:
            - "{{ wait.trigger.event.data.data == '/redemandeimagisuck' }}"
          sequence:
            - service: timer.start
              entity_id: timer.redemande_vider_imagisuck
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ wait.trigger.event.data.message.message_id }}"
                chat_id: "{{ wait.trigger.event.data.user_id }}"
                message: "OK je te redemande dans 30 minutes"
        - conditions:
            - "{{ wait.trigger.event.data.data == '/demainimagisuck' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data:
                callback_query_id: "{{ wait.trigger.event.data.id }}"
                message: "Tu as dis pas aujourd'hui"
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ wait.trigger.event.data.message.message_id }}"
                chat_id: "{{ wait.trigger.event.data.user_id }}"
                message: "OK on en reparle demain"
        - conditions:
            - "{{ wait.trigger.event.data.data == '/resetimagisuck' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data:
                callback_query_id: "{{ wait.trigger.event.data.id }}"
                message: OK merci
            - service: input_boolean.turn_off
              data:
                entity_id: input_boolean.vacuum_need_to_be_emptied
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ wait.trigger.event.data.message.message_id }}"
                chat_id: "{{ wait.trigger.event.data.user_id }}"
                message: "imagisuck est pret pour le prochain nettoyage"
            - service: variable.set_variable
              data:
                variable: nb_cleaning_last_dust_bin_emptied
                value: "{{ state_attr('vacuum.rockrobo_vacuum_v1', 'cleaning_count') }}"
                attributes:
                  time: "{{ state_attr('vacuum.rockrobo_vacuum_v1', 'total_cleaning_time') }}"
                  area: "{{ state_attr('vacuum.rockrobo_vacuum_v1', 'total_cleaned_area') }}"
