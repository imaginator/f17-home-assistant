---
# E: Daily launch of the vacuum in a specifc room passed in parameter
#
# E: If not done yet today, launch the room cleaning
#    parameters passed to this script are:
#    - room_bool: the imput_boolean linked to the room to know if it as alredy done today
#    - room_script: the name of the script to launch the cleaning
#    - room_name: name of the zone used for logbook entry
#    - room_battery_needed: Estimation of batterie needed to clean the room
#    - repetition: Number of repetition
#
# Inspired by https://community.home-assistant.io/t/howto-xiaomi-vacuum-zoned-cleaning/51293/193?u=oncleben31
# https://www.home-assistant.io/components/script/
# https://www.home-assistant.io/docs/scripts/
#
alias: "Lance le nettoyage quotidient dans une pièce"
description: "Gère le pilotage du nettoyage d'une pièce donnée."
fields:
  room_bool:
    description: Le booléen lié à la pièce pour savoir si cela a été déjà fait
    example: input_boolean.vacuum_can_clean_the_living_room
  room_script:
    description: nom du script à lancer pour démarrer le nettoyage
    example: script.launch_vacuum_in_livingroom
  room_name:
    description: Nom de la pièce utilisé dans le journal
    example: Salon
  room_battery_needed:
    description: Éstimation de la quantité de batterie nécessaire pour faire le nettoyage
    example: 35
  repetition:
    description: Nombre de répétition
    example: 1
sequence:
  # Test if boolean is 'on' (not yet done today)
  - condition: template
    value_template: "{{ is_state(room_bool, 'on') }}"

  # Test if imagisuck have enough battery before launching the cleaning.
  # To avoid cleaning stopeed and waiting vacuum charge from 20% to 80% before resuming
  - wait_template: "{{ states('sensor.vacuum_battery')| float - room_battery_needed | default(0) > 20 }}"

  # Save vacum states (count, time, area) / for testing
  - service: variable.set_variable
    data:
      variable: nb_cleaning_before_room
      value: "{{ state_attr('vacuum.imagisuck', 'cleaning_count') }}"
      attributes:
        time: "{{ state_attr('vacuum.imagisuck', 'total_cleaning_time') }}"
        area: "{{ state_attr('vacuum.imagisuck', 'total_cleaned_area') }}"
        battery: "{{ state_attr('vacuum.imagisuck', 'battery_level') }}"

  # Launch the cleaning
  - service: script.turn_on
    data:
      entity_id: "{{ room_script }}"
      variables:
        repetition: "{{ repetition }}"

  # Test if cleaning have started
  # Warning if battery reach low trigger (20%) the vacuum will return to dock for
  # charging to 80%. Currently no way to catch that.
  - wait_for_trigger:
      - platform: state
        entity_id: vacuum.imagisuck
        from: "docked"

  # Test if finished
  - wait_for_trigger:
      - platform: state
        entity_id: vacuum.imagisuck
        to: "docked"

  # Change the value of the boolean to make it done
  - service: input_boolean.turn_off
    data:
      entity_id: "{{ room_bool }}"

  # Add a message in logbook
  - service: logbook.log
    data:
      name: imagisuck
      message: >
        has just finished cleaning the {{ room_name }}
        {{state_attr('vacuum.imagisuck','total_cleaned_area')| int - state_attr('variable.nb_cleaning_before_room','area')|
        int }} m² in {{state_attr('vacuum.imagisuck','total_cleaning_time') | int -
        state_attr('variable.nb_cleaning_before_room','time')| int }} minutes.
        {{ state_attr('variable.nb_cleaning_before_room','battery') | int - state_attr('vacuum.imagisuck', 'battery_level')
        | int }} % of battery used.
      entity_id: vacuum.imagisuck
      domain: vacuum

  # For testing: notify with battey consumption when finished
  - service: notify.notify
    data:
      message: >
        Aspiration de {{ room_name }} terminée. imagisuck a nettoyé
        {{state_attr('vacuum.imagisuck','total_cleaned_area')| int - state_attr('variable.nb_cleaning_before_room','area')|
        int }} m² en {{state_attr('vacuum.imagisuck','total_cleaning_time') | int -
        state_attr('variable.nb_cleaning_before_room','time')| int }} minutes.
        {{ state_attr('variable.nb_cleaning_before_room','battery') | int - state_attr('vacuum.imagisuck', 'battery_level')
        | int }} % de batterie ont été utilisés.